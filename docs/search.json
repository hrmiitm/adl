[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ADL - Application Development Lab",
    "section": "",
    "text": "Hi",
    "crumbs": [
      "About The Course"
    ]
  },
  {
    "objectID": "W0/HTML/DAY_1.html",
    "href": "W0/HTML/DAY_1.html",
    "title": "Day-1",
    "section": "",
    "text": "Hi",
    "crumbs": [
      "Week 0",
      "3 Days to HTML",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html",
    "href": "W0/JS/DAY_1.html",
    "title": "Day-1",
    "section": "",
    "text": "Feature\nvar\nlet\nconst\n\n\n\n\nScope\nFunction/Global\nBlock\nBlock\n\n\nRedeclaration\n✅ Allowed\n❌ Not allowed\n❌ Not allowed\n\n\nReassignment\n✅ Allowed\n✅ Allowed\n❌ Not allowed\n\n\nInitialization\nOptional\nOptional\nRequired\n\n\nHoisting\nHoisted as undefined\nHoisted but ReferenceError\nHoisted but ReferenceError\n\n\n\n// var - avoid using\nvar x = 1;\nvar x = 2;  // OK - can redeclare\n\n// let - for variables that change\nlet y = 1;\ny = 2;      // OK - can reassign\n// let y = 3;  // Error - cannot redeclare\n\n// const - for constants\nconst z = 1;\n// z = 2;      // Error - cannot reassign\n// const w;    // Error - must initialize\n\n\n\n\n\nlet name = \"John\";           // string\nlet age = 25;                // number\nlet isActive = true;         // boolean\nlet data = null;             // null (intentionally empty)\nlet value;                   // undefined (declared but not assigned)\nlet id = Symbol(\"id\");       // symbol\nlet bigNum = 123n;           // bigint\nNote: typeof age will return you string string\n\n\n\nlet person = {name: \"John\"}; // object\nlet numbers = [1, 2, 3];     // array\nlet greet = function(){};    // function\n\n\n\n\n✅ Valid:\nlet myName;        // camelCase (preferred)\nlet _private;      // underscore prefix\nlet $element;      // dollar sign\nlet age21;         // numbers (not at start)\nlet firstName;     // descriptive names\n❌ Invalid:\nlet 2name;         // cannot start with number\nlet my-name;       // no hyphens\nlet class;         // reserved keyword\nlet my name;       // no spaces\n\n\n\n\n\nlet a = 5;\nlet b = \"5\";\n\n// Loose equality (with type coercion)\nconsole.log(a == b);    // true (converts types)\nconsole.log(a != b);    // false\n\n// Strict equality (no type coercion)\nconsole.log(a === b);   // false (different types)\nconsole.log(a !== b);   // true\nRule: Always use === and !== to avoid unexpected results.\n\n\n\n\n\n\nlet score = 85;\n\nif (score &gt;= 90) {\n    console.log(\"A Grade\");\n} else if (score &gt;= 80) {\n    console.log(\"B Grade\");\n} else if (score &gt;= 70) {\n    console.log(\"C Grade\");\n} else {\n    console.log(\"F Grade\");\n}\n\n\n\nlet age = 18;\nlet status = age &gt;= 18 ? \"Adult\" : \"Minor\";\n\n\n\nlet day = \"Monday\";\n\nswitch(day) {\n    case \"Monday\":\n        console.log(\"Start of work week\");\n        break;\n    case \"Friday\":\n        console.log(\"TGIF!\");\n        break;\n    default:\n        console.log(\"Regular day\");\n}\n\n\n\n\n\n\n\n\n\n\n\n\nFeature\nJavaScript\nPython\n\n\n\n\nVariable Declaration\nlet name = \"John\";\nname = \"John\"\n\n\nConstants\nconst PI = 3.14;\nPI = 3.14 (convention)\n\n\nBlocks\n{ } braces\nIndentation\n\n\nEquality\n=== (strict), == (loose)\n== (always strict)\n\n\nArrays/Lists\n[1, 2, 3]\n[1, 2, 3]\n\n\nObjects/Dicts\n{name: \"John\"}\n{\"name\": \"John\"}\n\n\nComments\n// single /* multi */\n# single ''' multi '''\n\n\nIf else\nif –&gt; else if –&gt; else\nif –&gt; elif –&gt; if\n\n\nDynamic Typing\nYes\nYes\n\n\n\n\n\n\n\nUse const by default, let when reassignment needed, avoid var\nAlways use === and !== for comparisons\nJavaScript uses braces {}, Python uses indentation\nJavaScript has both loose and strict equality, Python only has strict\nBoth languages are dynamically typed and case-sensitive\nJS uses “if –&gt; else if –&gt; if” but python uses “if –&gt; elif –&gt; else”",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#variables-varletconst",
    "href": "W0/JS/DAY_1.html#variables-varletconst",
    "title": "Day-1",
    "section": "",
    "text": "Feature\nvar\nlet\nconst\n\n\n\n\nScope\nFunction/Global\nBlock\nBlock\n\n\nRedeclaration\n✅ Allowed\n❌ Not allowed\n❌ Not allowed\n\n\nReassignment\n✅ Allowed\n✅ Allowed\n❌ Not allowed\n\n\nInitialization\nOptional\nOptional\nRequired\n\n\nHoisting\nHoisted as undefined\nHoisted but ReferenceError\nHoisted but ReferenceError\n\n\n\n// var - avoid using\nvar x = 1;\nvar x = 2;  // OK - can redeclare\n\n// let - for variables that change\nlet y = 1;\ny = 2;      // OK - can reassign\n// let y = 3;  // Error - cannot redeclare\n\n// const - for constants\nconst z = 1;\n// z = 2;      // Error - cannot reassign\n// const w;    // Error - must initialize",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#data-types",
    "href": "W0/JS/DAY_1.html#data-types",
    "title": "Day-1",
    "section": "",
    "text": "let name = \"John\";           // string\nlet age = 25;                // number\nlet isActive = true;         // boolean\nlet data = null;             // null (intentionally empty)\nlet value;                   // undefined (declared but not assigned)\nlet id = Symbol(\"id\");       // symbol\nlet bigNum = 123n;           // bigint\nNote: typeof age will return you string string\n\n\n\nlet person = {name: \"John\"}; // object\nlet numbers = [1, 2, 3];     // array\nlet greet = function(){};    // function",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#variable-naming-rules",
    "href": "W0/JS/DAY_1.html#variable-naming-rules",
    "title": "Day-1",
    "section": "",
    "text": "✅ Valid:\nlet myName;        // camelCase (preferred)\nlet _private;      // underscore prefix\nlet $element;      // dollar sign\nlet age21;         // numbers (not at start)\nlet firstName;     // descriptive names\n❌ Invalid:\nlet 2name;         // cannot start with number\nlet my-name;       // no hyphens\nlet class;         // reserved keyword\nlet my name;       // no spaces",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#comparison-operators",
    "href": "W0/JS/DAY_1.html#comparison-operators",
    "title": "Day-1",
    "section": "",
    "text": "let a = 5;\nlet b = \"5\";\n\n// Loose equality (with type coercion)\nconsole.log(a == b);    // true (converts types)\nconsole.log(a != b);    // false\n\n// Strict equality (no type coercion)\nconsole.log(a === b);   // false (different types)\nconsole.log(a !== b);   // true\nRule: Always use === and !== to avoid unexpected results.",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#control-flow",
    "href": "W0/JS/DAY_1.html#control-flow",
    "title": "Day-1",
    "section": "",
    "text": "let score = 85;\n\nif (score &gt;= 90) {\n    console.log(\"A Grade\");\n} else if (score &gt;= 80) {\n    console.log(\"B Grade\");\n} else if (score &gt;= 70) {\n    console.log(\"C Grade\");\n} else {\n    console.log(\"F Grade\");\n}\n\n\n\nlet age = 18;\nlet status = age &gt;= 18 ? \"Adult\" : \"Minor\";\n\n\n\nlet day = \"Monday\";\n\nswitch(day) {\n    case \"Monday\":\n        console.log(\"Start of work week\");\n        break;\n    case \"Friday\":\n        console.log(\"TGIF!\");\n        break;\n    default:\n        console.log(\"Regular day\");\n}",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#javascript-vs-python---key-differences",
    "href": "W0/JS/DAY_1.html#javascript-vs-python---key-differences",
    "title": "Day-1",
    "section": "",
    "text": "Feature\nJavaScript\nPython\n\n\n\n\nVariable Declaration\nlet name = \"John\";\nname = \"John\"\n\n\nConstants\nconst PI = 3.14;\nPI = 3.14 (convention)\n\n\nBlocks\n{ } braces\nIndentation\n\n\nEquality\n=== (strict), == (loose)\n== (always strict)\n\n\nArrays/Lists\n[1, 2, 3]\n[1, 2, 3]\n\n\nObjects/Dicts\n{name: \"John\"}\n{\"name\": \"John\"}\n\n\nComments\n// single /* multi */\n# single ''' multi '''\n\n\nIf else\nif –&gt; else if –&gt; else\nif –&gt; elif –&gt; if\n\n\nDynamic Typing\nYes\nYes",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#key-takeaways",
    "href": "W0/JS/DAY_1.html#key-takeaways",
    "title": "Day-1",
    "section": "",
    "text": "Use const by default, let when reassignment needed, avoid var\nAlways use === and !== for comparisons\nJavaScript uses braces {}, Python uses indentation\nJavaScript has both loose and strict equality, Python only has strict\nBoth languages are dynamically typed and case-sensitive\nJS uses “if –&gt; else if –&gt; if” but python uses “if –&gt; elif –&gt; else”",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#switch-statement---day-of-week",
    "href": "W0/JS/DAY_1.html#switch-statement---day-of-week",
    "title": "Day-1",
    "section": "1. Switch Statement - Day of Week",
    "text": "1. Switch Statement - Day of Week\n// DayOfWeek - Switch\nfunction getDayOfWeek(dayNumber) {\n        switch(dayNumber){\n                case 1: return \"Monday\";\n                case 2: return \"Tuesday\";\n                case 3: return \"Wednesday\";\n                case 4: return \"Thursday\";\n                case 5: return \"Friday\";\n                case 6: return \"Saturday\";\n                case 7: return \"Sunday\";\n                default: return \"Invalid Day Number!\";\n        }\n}\nconsole.log(1, getDayOfWeek(1));\nconsole.log(4, getDayOfWeek(4));\nconsole.log(7, getDayOfWeek(7));\nconsole.log(9, getDayOfWeek(9));\nOutput:\n1 Monday\n4 Thursday\n7 Sunday\n9 Invalid Day Number!",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#if-else-chain---grade-calculator",
    "href": "W0/JS/DAY_1.html#if-else-chain---grade-calculator",
    "title": "Day-1",
    "section": "2. If-Else Chain - Grade Calculator",
    "text": "2. If-Else Chain - Grade Calculator\n// Grade - If-Else If\nfunction grade(m) {\n        var g;\n        if (m&gt;=90) { g=\"S\"; }\n        else if (m&gt;=80) { g=\"A\"; }\n        else if (m&gt;=70) { g=\"B\"; }\n        else if (m&gt;=60) { g=\"C\"; }\n        else if (m&gt;=50) { g=\"D\"; }\n        else if (m&gt;=40) { g=\"E\"; }\n        else { g=\"U\"; }\n        return g;\n}\n// console.log(\"g\", g); // g is not defined\nconsole.log(95, grade(95));\nconsole.log(65, grade(65));\nconsole.log(25, grade(25));\n// console.lgo(\"g\", g); // g is not defined\nOutput:\n95 S\n65 C\n25 U\nKey Points:\n\nVariable g has function scope (using var)\nVariable g not accessible outside function (scope limitation)",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#ternary-operator---evenodd-check",
    "href": "W0/JS/DAY_1.html#ternary-operator---evenodd-check",
    "title": "Day-1",
    "section": "3. Ternary Operator - Even/Odd Check",
    "text": "3. Ternary Operator - Even/Odd Check\n// EvenOdd - Ternary Operator\nconst checkEvenOdd = (num) =&gt; {\n        return (num%2==0) ? \"Even\" : \"Odd\";\n}\nconsole.log(1, checkEvenOdd(1));\nconsole.log(4, checkEvenOdd(4));\nconsole.log(21, checkEvenOdd(21));\nconsole.log(98, checkEvenOdd(98));\n/* Arrow Function\n * - Doesn't Have its own this, Arguments, or super\n * - Best For\n *   - Callbacks\n *   - Array Methods (map, filter, reduce)\n *   - when we don't need this\n *   - Arrow Function doesn't create this of its own, it uses this of surroundings.\n */\nOutput:\n1 Odd\n4 Even\n21 Odd\n98 Even\nKey Points:\n\nTernary operator: condition ? valueIfTrue : valueIfFalse\nArrow function syntax: const func = (param) =&gt; { return value; }\nArrow functions don’t have their own this context",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#object-return---movie-ticket-pricing",
    "href": "W0/JS/DAY_1.html#object-return---movie-ticket-pricing",
    "title": "Day-1",
    "section": "4. Object Return - Movie Ticket Pricing",
    "text": "4. Object Return - Movie Ticket Pricing\n// MovieTicketPrice - JS Object Return\nfunction mtp(age){\n        let price, category;\n        if (age&lt;12) { price = 100, category = 'Child'; }\n        else if (age&lt;=59) { price = 200; category = \"Adult\"; }\n        else if (age&gt;=60) { price = 120; category = \"Senior\"; }\n        return { age:age, price:price, category:category }\n}\nconsole.log(mtp(4));\nconsole.log(mtp(14));\nconsole.log(mtp(40));\nconsole.log(mtp(85));\n/*\n * JS object support\n * - single quote for string\n */\nOutput:\n{ age: 4, price: 100, category: 'Child' }\n{ age: 14, price: 200, category: 'Adult' }\n{ age: 40, price: 200, category: 'Adult' }\n{ age: 85, price: 120, category: 'Senior' }\nKey Points:\n\nFunctions can return objects with multiple properties\nJavaScript supports both single and double quotes for strings",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#calculator-with-switch",
    "href": "W0/JS/DAY_1.html#calculator-with-switch",
    "title": "Day-1",
    "section": "5. Calculator with Switch",
    "text": "5. Calculator with Switch\n// Calc - Switch\nfunction calc(a,b,o) {\n        switch(o){\n                case '+':\n                        result = a + b; break;\n                case '-':\n                        result = a - b; break;\n                case '*':\n                        result = a * b; break;\n                case '/':\n                        result = a / b; break;\n                default:\n                        result = null;\n        }\n        return result;\n}\nconsole.log(4,1,'+', calc(4,1,'+'));\nconsole.log(4,7,'+', calc(4,7,'*'));\nconsole.log(result);\nconsole.log(4,7,'(', calc(4,7,'('));\nOutput:\n4 1 + 5\n4 7 + 28\n28\n4 7 ( null\nKey Points:\n\nbreak statements prevent fall-through to next case\nVariable result declared without let/const/var (becomes global)",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#type-checking---multiple-of-7",
    "href": "W0/JS/DAY_1.html#type-checking---multiple-of-7",
    "title": "Day-1",
    "section": "6. Type Checking - Multiple of 7",
    "text": "6. Type Checking - Multiple of 7\n// Multiple of 7 - Type Of\nfunction isMultipleOf7(n) {\n        if ( typeof n != 'number' || isNaN(n) ) { return \"Invalid Input\"; }\n        if (n % 7 == 0) { return \"Yes\"; }\n        else { return \"No\"; }\n}\nconsole.log(5, isMultipleOf7(5));\nconsole.log(49, isMultipleOf7(49));\nconsole.log(70, isMultipleOf7(70));\nconsole.log(\"hi\", isMultipleOf7(\"hi\"));\n/*\n * != compare values only similar to == (before comparing type coerce is done if needed)\n * !== compare bothe values and its type similar to === ( here type coerce is not done)\n */\nOutput:\n5 No\n49 Yes\n70 Yes\nhi Invalid Input\nKey Points:\n\ntypeof operator returns string indicating variable type\nisNaN() checks if value is “Not a Number”\n!= performs type coercion, !== does strict comparison\nInput validation prevents runtime errors",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#array-find-method---age-classification",
    "href": "W0/JS/DAY_1.html#array-find-method---age-classification",
    "title": "Day-1",
    "section": "7. Array Find Method - Age Classification",
    "text": "7. Array Find Method - Age Classification\n// AgeGroup Classify - JS Object Find\nfunction cag(age) {\n        const ageGroups = [\n                {min:0, max:12, category:\"Child\"},\n                {min:13, max:19, category:\"Teenager\"},\n                {min:20, max:59, category:\"Adult\"},\n                {min:60, max:120, category:\"Senior\"},\n        ]\n        const group = ageGroups.find(g =&gt; (age&gt;=g.min && age&lt;=g.max));\n        return group;\n}\nconsole.log(8, cag(8));\nconsole.log(16, cag(16));\nconsole.log(35, cag(35));\nconsole.log(70, cag(70));\nOutput:\n8 { min: 0, max: 12, category: 'Child' }\n16 { min: 13, max: 19, category: 'Teenager' }\n35 { min: 20, max: 59, category: 'Adult' }\n70 { min: 60, max: 120, category: 'Senior' }\nKey Points:\n\nfind() method returns first element that matches condition\nArrow function as callback: g =&gt; (condition)",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#temperature-converter",
    "href": "W0/JS/DAY_1.html#temperature-converter",
    "title": "Day-1",
    "section": "8. Temperature Converter",
    "text": "8. Temperature Converter\n// Temp Converter\nfunction convert(v, f, t) { // value, from, to\n        const units = ['C', 'F', 'K']\n        let celsius;\n        switch (f){\n                case 'C': celsius = v; break;\n                case 'F': celsius = (v-32) * (5/9); break;\n                case 'K': celsius = v - 273.15;\n        }\n        let result;\n        switch (t){\n                case 'C': result = celsius; break;\n                case 'F': result = (celsius * (9/5)) + 32; break;\n                case 'K': result = celsius + 273.15; break;\n        }\n        return result;\n}\nconsole.log(convert(100, 'C', 'F')); // 212\nconsole.log(convert(32, 'F', 'C')); // 0\nconsole.log(convert(273.1, 'K', 'C')); // 0\nOutput:\n212\n0\n-0.049999999999954525\nKey Points:\n\nTwo-step conversion: input → Celsius → target unit\nFloating-point precision issues cause small rounding errors",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#code-1-switch-statement---day-of-week",
    "href": "W0/JS/DAY_1.html#code-1-switch-statement---day-of-week",
    "title": "Day-1",
    "section": "Code-1: Switch Statement - Day of Week",
    "text": "Code-1: Switch Statement - Day of Week\n// DayOfWeek - Switch\nfunction getDayOfWeek(dayNumber) {\n        switch(dayNumber){\n                case 1: return \"Monday\";\n                case 2: return \"Tuesday\";\n                case 3: return \"Wednesday\";\n                case 4: return \"Thursday\";\n                case 5: return \"Friday\";\n                case 6: return \"Saturday\";\n                case 7: return \"Sunday\";\n                default: return \"Invalid Day Number!\";\n        }\n}\nconsole.log(1, getDayOfWeek(1));\nconsole.log(4, getDayOfWeek(4));\nconsole.log(7, getDayOfWeek(7));\nconsole.log(9, getDayOfWeek(9));\nOutput:\n1 Monday\n4 Thursday\n7 Sunday\n9 Invalid Day Number!",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#code-2-if-else-chain---grade-calculator",
    "href": "W0/JS/DAY_1.html#code-2-if-else-chain---grade-calculator",
    "title": "Day-1",
    "section": "Code-2: If-Else Chain - Grade Calculator",
    "text": "Code-2: If-Else Chain - Grade Calculator\n// Grade - If-Else If\nfunction grade(m) {\n        var g;\n        if (m&gt;=90) { g=\"S\"; }\n        else if (m&gt;=80) { g=\"A\"; }\n        else if (m&gt;=70) { g=\"B\"; }\n        else if (m&gt;=60) { g=\"C\"; }\n        else if (m&gt;=50) { g=\"D\"; }\n        else if (m&gt;=40) { g=\"E\"; }\n        else { g=\"U\"; }\n        return g;\n}\n// console.log(\"g\", g); // g is not defined\nconsole.log(95, grade(95));\nconsole.log(65, grade(65));\nconsole.log(25, grade(25));\n// console.lgo(\"g\", g); // g is not defined\nOutput:\n95 S\n65 C\n25 U\nKey Points:\n\nVariable g has function scope (using var)\nVariable g not accessible outside function (scope limitation)",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#code-3-ternary-operator---evenodd-check",
    "href": "W0/JS/DAY_1.html#code-3-ternary-operator---evenodd-check",
    "title": "Day-1",
    "section": "Code-3: Ternary Operator - Even/Odd Check",
    "text": "Code-3: Ternary Operator - Even/Odd Check\n// EvenOdd - Ternary Operator\nconst checkEvenOdd = (num) =&gt; {\n        return (num%2==0) ? \"Even\" : \"Odd\";\n}\nconsole.log(1, checkEvenOdd(1));\nconsole.log(4, checkEvenOdd(4));\nconsole.log(21, checkEvenOdd(21));\nconsole.log(98, checkEvenOdd(98));\n/* Arrow Function\n * - Doesn't Have its own this, Arguments, or super\n * - Best For\n *   - Callbacks\n *   - Array Methods (map, filter, reduce)\n *   - when we don't need this\n *   - Arrow Function doesn't create this of its own, it uses this of surroundings.\n */\nOutput:\n1 Odd\n4 Even\n21 Odd\n98 Even\nKey Points:\n\nTernary operator: condition ? valueIfTrue : valueIfFalse\nArrow function syntax: const func = (param) =&gt; { return value; }\nArrow functions don’t have their own this context",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#code-4-object-return---movie-ticket-pricing",
    "href": "W0/JS/DAY_1.html#code-4-object-return---movie-ticket-pricing",
    "title": "Day-1",
    "section": "Code-4: Object Return - Movie Ticket Pricing",
    "text": "Code-4: Object Return - Movie Ticket Pricing\n// MovieTicketPrice - JS Object Return\nfunction mtp(age){\n        let price, category;\n        if (age&lt;12) { price = 100, category = 'Child'; }\n        else if (age&lt;=59) { price = 200; category = \"Adult\"; }\n        else if (age&gt;=60) { price = 120; category = \"Senior\"; }\n        return { age:age, price:price, category:category }\n}\nconsole.log(mtp(4));\nconsole.log(mtp(14));\nconsole.log(mtp(40));\nconsole.log(mtp(85));\n/*\n * JS object support\n * - single quote for string\n */\nOutput:\n{ age: 4, price: 100, category: 'Child' }\n{ age: 14, price: 200, category: 'Adult' }\n{ age: 40, price: 200, category: 'Adult' }\n{ age: 85, price: 120, category: 'Senior' }\nKey Points:\n\nFunctions can return objects with multiple properties\nJavaScript supports both single and double quotes for strings",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#code-5-calculator-with-switch",
    "href": "W0/JS/DAY_1.html#code-5-calculator-with-switch",
    "title": "Day-1",
    "section": "Code-5: Calculator with Switch",
    "text": "Code-5: Calculator with Switch\n// Calc - Switch\nfunction calc(a,b,o) {\n        switch(o){\n                case '+':\n                        result = a + b; break;\n                case '-':\n                        result = a - b; break;\n                case '*':\n                        result = a * b; break;\n                case '/':\n                        result = a / b; break;\n                default:\n                        result = null;\n        }\n        return result;\n}\nconsole.log(4,1,'+', calc(4,1,'+'));\nconsole.log(4,7,'+', calc(4,7,'*'));\nconsole.log(result);\nconsole.log(4,7,'(', calc(4,7,'('));\nOutput:\n4 1 + 5\n4 7 + 28\n28\n4 7 ( null\nKey Points:\n\nbreak statements prevent fall-through to next case\nVariable result declared without let/const/var (becomes global)",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#code-6-type-checking---multiple-of-7",
    "href": "W0/JS/DAY_1.html#code-6-type-checking---multiple-of-7",
    "title": "Day-1",
    "section": "Code-6: Type Checking - Multiple of 7",
    "text": "Code-6: Type Checking - Multiple of 7\n// Multiple of 7 - Type Of\nfunction isMultipleOf7(n) {\n        if ( typeof n != 'number' || isNaN(n) ) { return \"Invalid Input\"; }\n        if (n % 7 == 0) { return \"Yes\"; }\n        else { return \"No\"; }\n}\nconsole.log(5, isMultipleOf7(5));\nconsole.log(49, isMultipleOf7(49));\nconsole.log(70, isMultipleOf7(70));\nconsole.log(\"hi\", isMultipleOf7(\"hi\"));\n/*\n * != compare values only similar to == (before comparing type coerce is done if needed)\n * !== compare bothe values and its type similar to === ( here type coerce is not done)\n */\nOutput:\n5 No\n49 Yes\n70 Yes\nhi Invalid Input\nKey Points:\n\ntypeof operator returns string indicating variable type\nisNaN() checks if value is “Not a Number”\n!= performs type coercion, !== does strict comparison\nInput validation prevents runtime errors",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#code-7-array-find-method---age-classification",
    "href": "W0/JS/DAY_1.html#code-7-array-find-method---age-classification",
    "title": "Day-1",
    "section": "Code-7: Array Find Method - Age Classification",
    "text": "Code-7: Array Find Method - Age Classification\n// AgeGroup Classify - JS Object Find\nfunction cag(age) {\n        const ageGroups = [\n                {min:0, max:12, category:\"Child\"},\n                {min:13, max:19, category:\"Teenager\"},\n                {min:20, max:59, category:\"Adult\"},\n                {min:60, max:120, category:\"Senior\"},\n        ]\n        const group = ageGroups.find(g =&gt; (age&gt;=g.min && age&lt;=g.max));\n        return group;\n}\nconsole.log(8, cag(8));\nconsole.log(16, cag(16));\nconsole.log(35, cag(35));\nconsole.log(70, cag(70));\nOutput:\n8 { min: 0, max: 12, category: 'Child' }\n16 { min: 13, max: 19, category: 'Teenager' }\n35 { min: 20, max: 59, category: 'Adult' }\n70 { min: 60, max: 120, category: 'Senior' }\nKey Points:\n\nfind() method returns first element that matches condition\nArrow function as callback: g =&gt; (condition)",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  },
  {
    "objectID": "W0/JS/DAY_1.html#code-8-temperature-converter",
    "href": "W0/JS/DAY_1.html#code-8-temperature-converter",
    "title": "Day-1",
    "section": "Code-8: Temperature Converter",
    "text": "Code-8: Temperature Converter\n// Temp Converter\nfunction convert(v, f, t) { // value, from, to\n        const units = ['C', 'F', 'K']\n        let celsius;\n        switch (f){\n                case 'C': celsius = v; break;\n                case 'F': celsius = (v-32) * (5/9); break;\n                case 'K': celsius = v - 273.15;\n        }\n        let result;\n        switch (t){\n                case 'C': result = celsius; break;\n                case 'F': result = (celsius * (9/5)) + 32; break;\n                case 'K': result = celsius + 273.15; break;\n        }\n        return result;\n}\nconsole.log(convert(100, 'C', 'F')); // 212\nconsole.log(convert(32, 'F', 'C')); // 0\nconsole.log(convert(273.1, 'K', 'C')); // 0\nOutput:\n212\n0\n-0.049999999999954525\nKey Points:\n\nTwo-step conversion: input → Celsius → target unit\nFloating-point precision issues cause small rounding errors",
    "crumbs": [
      "Week 0",
      "10 Days Of JS",
      "Day-1"
    ]
  }
]