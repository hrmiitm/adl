---
title: "Day-1"
subtitle: "Variables And Conditionals"
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 3
    smooth-scroll: true
    code-copy: true
    highlight-style: github
---

<details open>
<summary><h1 style="display: inline;">JavaScript Core Concepts - Quick Notes</h1></summary>


## **1. Variables: var/let/const**

| Feature | `var` | `let` | `const` |
| :-- | :-- | :-- | :-- |
| **Scope** | Function/Global | Block | Block |
| **Redeclaration** | ✅ Allowed | ❌ Not allowed | ❌ Not allowed |
| **Reassignment** | ✅ Allowed | ✅ Allowed | ❌ Not allowed |
| **Initialization** | Optional | Optional | Required |
| **Hoisting** | Hoisted as `undefined` | Hoisted but ReferenceError | Hoisted but ReferenceError |

```javascript
// var - avoid using
var x = 1;
var x = 2;  // OK - can redeclare

// let - for variables that change
let y = 1;
y = 2;      // OK - can reassign
// let y = 3;  // Error - cannot redeclare

// const - for constants
const z = 1;
// z = 2;      // Error - cannot reassign
// const w;    // Error - must initialize
```


## **2. Data Types**

### **Primitive Types:**

```javascript
let name = "John";           // string
let age = 25;                // number
let isActive = true;         // boolean
let data = null;             // null (intentionally empty)
let value;                   // undefined (declared but not assigned)
let id = Symbol("id");       // symbol
let bigNum = 123n;           // bigint
```
**Note:** `typeof age` will return you string `string`


### **Reference Types:**

```javascript
let person = {name: "John"}; // object
let numbers = [1, 2, 3];     // array
let greet = function(){};    // function
```


## **3. Variable Naming Rules**

**✅ Valid:**

```javascript
let myName;        // camelCase (preferred)
let _private;      // underscore prefix
let $element;      // dollar sign
let age21;         // numbers (not at start)
let firstName;     // descriptive names
```

**❌ Invalid:**

```javascript
let 2name;         // cannot start with number
let my-name;       // no hyphens
let class;         // reserved keyword
let my name;       // no spaces
```


## **4. Comparison Operators**

### **Equality Comparison:**

```javascript
let a = 5;
let b = "5";

// Loose equality (with type coercion)
console.log(a == b);    // true (converts types)
console.log(a != b);    // false

// Strict equality (no type coercion)
console.log(a === b);   // false (different types)
console.log(a !== b);   // true
```

**Rule:** Always use `===` and `!==` to avoid unexpected results.


## **5. Control Flow**

### **If-Else Statements:**

```javascript
let score = 85;

if (score >= 90) {
    console.log("A Grade");
} else if (score >= 80) {
    console.log("B Grade");
} else if (score >= 70) {
    console.log("C Grade");
} else {
    console.log("F Grade");
}
```


### **Ternary Operator:**

```javascript
let age = 18;
let status = age >= 18 ? "Adult" : "Minor";
```


### **Switch Statement:**

```javascript
let day = "Monday";

switch(day) {
    case "Monday":
        console.log("Start of work week");
        break;
    case "Friday":
        console.log("TGIF!");
        break;
    default:
        console.log("Regular day");
}
```


## **6. JavaScript vs Python - Key Differences**

| Feature | JavaScript | Python |
| :-- | :-- | :-- |
| **Variable Declaration** | `let name = "John";` | `name = "John"` |
| **Constants** | `const PI = 3.14;` | `PI = 3.14` (convention) |
| **Blocks** | `{ }` braces | Indentation |
| **Equality** | `===` (strict), `==` (loose) | `==` (always strict) |
| **Arrays/Lists** | `[1, 2, 3]` | `[1, 2, 3]` |
| **Objects/Dicts** | `{name: "John"}` | `{"name": "John"}` |
| **Comments** | `// single` `/* multi */` | `# single` `''' multi '''` |
| **If else** | if --> else if --> else | if --> elif --> if |
| **Dynamic Typing** | Yes | Yes |



## **Key Takeaways:**

1. **Use `const` by default**, `let` when reassignment needed, avoid `var`
2. **Always use `===` and `!==`** for comparisons
3. **JavaScript uses braces `{}`**, Python uses indentation
4. **JavaScript has both loose and strict equality**, Python only has strict
5. **Both languages are dynamically typed** and case-sensitive
6. JS uses **"if --> else if --> if"** but python uses **"if --> elif --> else"**

</details>

<details open>
<summary><h1 style="display: inline;">Code Examples</h1></summary>


## **1. Switch Statement - Day of Week**

```javascript
// DayOfWeek - Switch
function getDayOfWeek(dayNumber) {
        switch(dayNumber){
                case 1: return "Monday";
                case 2: return "Tuesday";
                case 3: return "Wednesday";
                case 4: return "Thursday";
                case 5: return "Friday";
                case 6: return "Saturday";
                case 7: return "Sunday";
                default: return "Invalid Day Number!";
        }
}
console.log(1, getDayOfWeek(1));
console.log(4, getDayOfWeek(4));
console.log(7, getDayOfWeek(7));
console.log(9, getDayOfWeek(9));
```

**Output:**

```
1 Monday
4 Thursday
7 Sunday
9 Invalid Day Number!
```


## **2. If-Else Chain - Grade Calculator**

```javascript
// Grade - If-Else If
function grade(m) {
        var g;
        if (m>=90) { g="S"; }
        else if (m>=80) { g="A"; }
        else if (m>=70) { g="B"; }
        else if (m>=60) { g="C"; }
        else if (m>=50) { g="D"; }
        else if (m>=40) { g="E"; }
        else { g="U"; }
        return g;
}
// console.log("g", g); // g is not defined
console.log(95, grade(95));
console.log(65, grade(65));
console.log(25, grade(25));
// console.lgo("g", g); // g is not defined
```

**Output:**

```
95 S
65 C
25 U
```

**Key Points:**

- Variable `g` has function scope (using `var`)
- Variable `g` not accessible outside function (scope limitation)


## **3. Ternary Operator - Even/Odd Check**

```javascript
// EvenOdd - Ternary Operator
const checkEvenOdd = (num) => {
        return (num%2==0) ? "Even" : "Odd";
}
console.log(1, checkEvenOdd(1));
console.log(4, checkEvenOdd(4));
console.log(21, checkEvenOdd(21));
console.log(98, checkEvenOdd(98));
/* Arrow Function
 * - Doesn't Have its own this, Arguments, or super
 * - Best For
 *   - Callbacks
 *   - Array Methods (map, filter, reduce)
 *   - when we don't need this
 *   - Arrow Function doesn't create this of its own, it uses this of surroundings.
 */
```

**Output:**

```
1 Odd
4 Even
21 Odd
98 Even
```

**Key Points:**

- Ternary operator: `condition ? valueIfTrue : valueIfFalse`
- Arrow function syntax: `const func = (param) => { return value; }`
- Arrow functions don't have their own `this` context


## **4. Object Return - Movie Ticket Pricing**

```javascript
// MovieTicketPrice - JS Object Return
function mtp(age){
        let price, category;
        if (age<12) { price = 100, category = 'Child'; }
        else if (age<=59) { price = 200; category = "Adult"; }
        else if (age>=60) { price = 120; category = "Senior"; }
        return { age:age, price:price, category:category }
}
console.log(mtp(4));
console.log(mtp(14));
console.log(mtp(40));
console.log(mtp(85));
/*
 * JS object support
 * - single quote for string
 */
```

**Output:**

```
{ age: 4, price: 100, category: 'Child' }
{ age: 14, price: 200, category: 'Adult' }
{ age: 40, price: 200, category: 'Adult' }
{ age: 85, price: 120, category: 'Senior' }
```

**Key Points:**

- Functions can return objects with multiple properties
- JavaScript supports both single and double quotes for strings


## **5. Calculator with Switch**

```javascript
// Calc - Switch
function calc(a,b,o) {
        switch(o){
                case '+':
                        result = a + b; break;
                case '-':
                        result = a - b; break;
                case '*':
                        result = a * b; break;
                case '/':
                        result = a / b; break;
                default:
                        result = null;
        }
        return result;
}
console.log(4,1,'+', calc(4,1,'+'));
console.log(4,7,'+', calc(4,7,'*'));
console.log(result);
console.log(4,7,'(', calc(4,7,'('));
```

**Output:**

```
4 1 + 5
4 7 + 28
28
4 7 ( null
```

**Key Points:**

- `break` statements prevent fall-through to next case
- Variable `result` declared without `let/const/var` (becomes global)


## **6. Type Checking - Multiple of 7**

```javascript
// Multiple of 7 - Type Of
function isMultipleOf7(n) {
        if ( typeof n != 'number' || isNaN(n) ) { return "Invalid Input"; }
        if (n % 7 == 0) { return "Yes"; }
        else { return "No"; }
}
console.log(5, isMultipleOf7(5));
console.log(49, isMultipleOf7(49));
console.log(70, isMultipleOf7(70));
console.log("hi", isMultipleOf7("hi"));
/*
 * != compare values only similar to == (before comparing type coerce is done if needed)
 * !== compare bothe values and its type similar to === ( here type coerce is not done)
 */
```

**Output:**

```
5 No
49 Yes
70 Yes
hi Invalid Input
```

**Key Points:**

- `typeof` operator returns string indicating variable type
- `isNaN()` checks if value is "Not a Number"
- `!=` performs type coercion, `!==` does strict comparison
- Input validation prevents runtime errors


## **7. Array Find Method - Age Classification**

```javascript
// AgeGroup Classify - JS Object Find
function cag(age) {
        const ageGroups = [
                {min:0, max:12, category:"Child"},
                {min:13, max:19, category:"Teenager"},
                {min:20, max:59, category:"Adult"},
                {min:60, max:120, category:"Senior"},
        ]
        const group = ageGroups.find(g => (age>=g.min && age<=g.max));
        return group;
}
console.log(8, cag(8));
console.log(16, cag(16));
console.log(35, cag(35));
console.log(70, cag(70));
```

**Output:**

```
8 { min: 0, max: 12, category: 'Child' }
16 { min: 13, max: 19, category: 'Teenager' }
35 { min: 20, max: 59, category: 'Adult' }
70 { min: 60, max: 120, category: 'Senior' }
```

**Key Points:**

- `find()` method returns first element that matches condition
- Arrow function as callback: `g => (condition)`


## **8. Temperature Converter**

```javascript
// Temp Converter
function convert(v, f, t) { // value, from, to
        const units = ['C', 'F', 'K']
        let celsius;
        switch (f){
                case 'C': celsius = v; break;
                case 'F': celsius = (v-32) * (5/9); break;
                case 'K': celsius = v - 273.15;
        }
        let result;
        switch (t){
                case 'C': result = celsius; break;
                case 'F': result = (celsius * (9/5)) + 32; break;
                case 'K': result = celsius + 273.15; break;
        }
        return result;
}
console.log(convert(100, 'C', 'F')); // 212
console.log(convert(32, 'F', 'C')); // 0
console.log(convert(273.1, 'K', 'C')); // 0
```

**Output:**

```
212
0
-0.049999999999954525
```

**Key Points:**

- Two-step conversion: input → Celsius → target unit
- Floating-point precision issues cause small rounding errors


</details>