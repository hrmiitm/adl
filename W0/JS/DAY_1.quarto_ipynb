{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c38e967a",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Day-1\"\n",
    "subtitle: \"Variables And Conditionals\"\n",
    "format:\n",
    "  html:\n",
    "    toc: true\n",
    "    toc-location: right\n",
    "    toc-depth: 3\n",
    "    smooth-scroll: true\n",
    "\n",
    "    # Code formatting\n",
    "    code-copy: true\n",
    "    code-line-numbers: true\n",
    "#     code-overflow: wrap\n",
    "    highlight-style: dracula\n",
    "\n",
    "---\n",
    "\n",
    "<details open>\n",
    "<summary><h1 style=\"display: inline;\">JavaScript Core Concepts - Quick Notes</h1></summary>\n",
    "\n",
    "\n",
    "## **1. Variables: var/let/const**\n",
    "\n",
    "**let const are Introduced in ES6 (ECMAScript 2015)**\n",
    "\n",
    "Var --> Function/Global Scope  \n",
    "let, const --> Block Scope\n",
    "\n",
    "**All are hoisted**, but **only var is initialized as `undefined`** at the top of its scope. let and const exist in a `temporal dead zone` until their declaration line is reached.\n",
    "\n",
    "```javascript\n",
    "// var - avoid using\n",
    "var x = 1;\n",
    "var x = 2;  // OK - can redeclare/assigned\n",
    "\n",
    "// let - for variables that change\n",
    "let y = 1;\n",
    "y = 2;      // OK - can reassign\n",
    "// let y = 3;  // Error\n",
    "\n",
    "// const - for constants\n",
    "const z = 1;    // must be initialized\n",
    "// z = 2;      // Error \n",
    "// const w;    // Error \n",
    "```\n",
    "\n",
    "::: {.callout-tip}\n",
    "## Problem with var?\n",
    "\n",
    "1. Function-scoped, not block-scoped\n",
    "        - Variables declared with var are visible outside the block (if, for, etc.), which often caused bugs.\n",
    "        - ```{javascript}\n",
    "        // Using var\n",
    "        for (var i = 0; i < 3; i++) {\n",
    "        setTimeout(() => console.log(\"var:\", i), 1000);\n",
    "        }\n",
    "        // Output: var: 3, var: 3, var: 3   (unexpected!)\n",
    "\n",
    "\n",
    "        // Using let\n",
    "        for (let j = 0; j < 3; j++) {\n",
    "        setTimeout(() => console.log(\"let:\", j), 1000);\n",
    "        }\n",
    "        // Output: let: 0, let: 1, let: 2   (expected!)\n",
    "        ```\n",
    "\n",
    "\n",
    "2. Hoisting with undefined\n",
    "        - var declarations are hoisted (moved to the top of scope), but initialized with undefined. This sometimes leads to unexpected behavior.\n",
    ":::\n",
    "\n",
    "\n",
    "::: {.callout-note}\n",
    "\n",
    "## What Does \"Hoisted\" Mean in JavaScript?\n",
    "\n",
    "Hoisting is a behavior in JavaScript where variable and function declarations are moved to the top of their scope (either the function or the global scope) before the code runs. This means you can use certain variables or functions before you actually write their declaration in the code.\n",
    "\n",
    "```{javascript}\n",
    "console.log(a); // undefined\n",
    "var a = 5;\n",
    "console.log(a); // 5\n",
    "```\n",
    "\n",
    "```{javascript}\n",
    "console.log(b); // ReferenceError\n",
    "let b = 10;\n",
    "```\n",
    "\n",
    "With `let` and `const`, the variable is hoisted to the top of its block, but not initialized. If you try to use it before its declaration, you get a ReferenceError because it's in the **Temporal Dead Zone (TDZ)**\n",
    "\n",
    ":::\n",
    "\n",
    "::: {.callout-tip}\n",
    "## What to use?\n",
    "\n",
    "Use `const` mostly.\n",
    ":::\n",
    "\n",
    "\n",
    "## **2. Data Types**\n",
    "\n",
    "### **7 Primitive Types:**\n",
    "\n",
    "```javascript\n",
    "let name = \"John\";           // string\n",
    "let age = 25;                // number --> 2^53-1\n",
    "let isActive = true;         // boolean\n",
    "let data = null;             // null (intentionally empty)\n",
    "let value;                   // undefined (declared but not assigned)\n",
    "let id = Symbol(\"id\");       // symbol\n",
    "let bigNum = 123n;           // bigint --> only Integer(till memory)\n",
    "```\n",
    "\n",
    "::: {.callout-tip}\n",
    "## typeof null; type undefined\n",
    "\n",
    "Type of `null` is `object`, while type of `undefined` is `undefined`.  \n",
    "`null` type as `object` was a bug / design mistake in the original implementation, but it became part of the language.\n",
    ":::\n",
    "\n",
    "\n",
    "### **Reference Types:**\n",
    "\n",
    "```javascript\n",
    "let person = {name: \"John\"}; // object\n",
    "let numbers = [1, 2, 3];     // array\n",
    "let greet = function(){};    // function\n",
    "```\n",
    "\n",
    "\n",
    "## **3. Variable Naming Rules**\n",
    "\n",
    "**✅ Valid:**\n",
    "\n",
    "```javascript\n",
    "let myName;        // camelCase (preferred)\n",
    "let _private;      // underscore prefix\n",
    "let $element;      // dollar sign\n",
    "let age21;         // numbers (not at start)\n",
    "let firstName;     // descriptive names\n",
    "```\n",
    "\n",
    "**❌ Invalid:**\n",
    "\n",
    "```javascript\n",
    "let 2name;         // cannot start with number\n",
    "let my-name;       // no hyphens\n",
    "let class;         // reserved keyword\n",
    "let my name;       // no spaces\n",
    "```\n",
    "\n",
    "\n",
    "## **4. Comparison Operators**\n",
    "\n",
    "### **Equality Comparison:**\n",
    "\n",
    "```javascript\n",
    "let a = 5;\n",
    "let b = \"5\";\n",
    "\n",
    "// Loose equality (with type coercion)\n",
    "console.log(a == b);    // true (converts types)\n",
    "console.log(a != b);    // false\n",
    "\n",
    "// Strict equality (no type coercion)\n",
    "console.log(a === b);   // false (different types)\n",
    "console.log(a !== b);   // true\n",
    "```\n",
    "\n",
    "**Rule:** Always use `===` and `!==` to avoid unexpected results.\n",
    "\n",
    "\n",
    "\n",
    "## **4. Type Conversion**\n",
    "\n",
    "1. `Number(x)`\n",
    "        - Booleans true, false --> 1,0\n",
    "        - null --> 0\n",
    "        - undefined, '33abc' --> `Nan`\n",
    "2. `Boolean(x)`\n",
    "        - 1, 0 --> true, false\n",
    "        - \"\" --> false\n",
    "        - \"0\" --> true\n",
    "3. `String(x)`\n",
    "\n",
    "### String +-*/ Number\n",
    "\n",
    "1. `+` : always do string concat `\"5\" + 5` or `5 + 5 + \"5\"` will give 55 and 105.\n",
    "2. `- * / % **` : strings converted to numbers\n",
    "\n",
    "**Note**: booleans are converted to numbers and `null` --> `0` but `undefined` --> `NaN`\n",
    "\n",
    "```{javascript}\n",
    "> null > 0\n",
    "false\n",
    "> null == 0\n",
    "false\n",
    "> null >= 0\n",
    "true\n",
    "```\n",
    "\n",
    "On equality, `Type Coercion` happend with relational operators, it change `null` to `0`, causes it to `true`.\n",
    "\n",
    "While for loose equality javascript has `special rule that null can be equal to null and undefined only`.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "## **Key Takeaways:**\n",
    "\n",
    "1. **Use `const` by default**, `let` when reassignment needed, avoid `var`\n",
    "2. **Always use `===` and `!==`** for comparisons\n",
    "3. **JavaScript uses braces `{}`**, Python uses indentation\n",
    "4. **JavaScript has both loose and strict equality**, Python only has strict\n",
    "5. **Both languages are dynamically typed** and case-sensitive\n",
    "6. For `null` on loose equality javascript has `special rule that null can be equal to null and undefined only`.\n",
    "\n",
    "</details>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/home/hrm/.local/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
